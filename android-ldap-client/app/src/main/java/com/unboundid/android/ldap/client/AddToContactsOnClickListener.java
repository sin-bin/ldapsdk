/*
 * Copyright 2009-2019 Ping Identity Corporation
 * All Rights Reserved.
 */
/*
 * Copyright (C) 2009-2019 Ping Identity Corporation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (GPLv2 only)
 * or the terms of the GNU Lesser General Public License (LGPLv2.1 only)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses>.
 */
package com.unboundid.android.ldap.client;



import java.util.ArrayList;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.provider.ContactsContract;
import android.view.View;
import android.view.View.OnClickListener;

import com.unboundid.ldap.sdk.Entry;

import static com.unboundid.android.ldap.client.Logger.*;



/**
 * This class provides an on-click listener that is meant to add a user to the
 * phone's address book when the associated view is clicked.
 */
final class AddToContactsOnClickListener
      implements OnClickListener
{
  /**
   * The tag that will be used for log messages generated by this class.
   */
  private static final String LOG_TAG = "AddToContactsListener";



  // The activity that created this on-click listener.
  private final Activity activity;

  // The information about the person to add.

  private final String lastName;
  private final String firstName;
  private final String fullName;
  private final String title;
  private final String department;
  private final String organization;
  private final String workNumber;
  private final String mobileNumber;
  private final String homeNumber;
  private final String faxNumber;
  private final String pagerNumber;
  private final String address;
  private final String city;
  private final String state;
  private final String postalCode;
  private final String email;
  private final String websiteUri;
  private final String note;


  /**
   * Creates a new phone number on-click listener that will dial the provided
   * telephone number when the associated view is clicked.
   *
   * @param  activity  The activity that created this on-click listener.
   * @param  entry     The entry for the user to add.
   */
  AddToContactsOnClickListener(final Activity activity, final Entry entry)
  {
    logEnter(LOG_TAG, "<init>", activity, entry);

    this.activity = activity;

    lastName = entry.getAttributeValue(AttributeMapper.ATTR_LAST_NAME);
    firstName = entry.getAttributeValue(AttributeMapper.ATTR_FIRST_NAME);
    fullName = entry.getAttributeValue(AttributeMapper.ATTR_FULL_NAME);
    title = entry.getAttributeValue(AttributeMapper.ATTR_TITLE);
    department = entry.getAttributeValue(AttributeMapper.ATTR_ORGANIZATIONAL_UNIT);
    organization = entry.getAttributeValue(AttributeMapper.ATTR_ORGANIZATION);
    workNumber = entry.getAttributeValue(AttributeMapper.ATTR_PRIMARY_PHONE);
    mobileNumber = entry.getAttributeValue(AttributeMapper.ATTR_MOBILE_PHONE);
    homeNumber = entry.getAttributeValue(AttributeMapper.ATTR_HOME_PHONE);
    faxNumber = entry.getAttributeValue(AttributeMapper.ATTR_FACSIMILE);
    pagerNumber = entry.getAttributeValue(AttributeMapper.ATTR_PAGER);
    address = entry.getAttributeValue(AttributeMapper.ATTR_STREET_ADDRESS);
    city = entry.getAttributeValue(AttributeMapper.ATTR_CITY);
    state = entry.getAttributeValue(AttributeMapper.ATTR_STATE);
    postalCode = entry.getAttributeValue(AttributeMapper.ATTR_POSTAL_CODE);
    email = entry.getAttributeValue(AttributeMapper.ATTR_PRIMARY_MAIL);
    websiteUri = entry.getAttributeValue(AttributeMapper.ATTR_URI);
    note = entry.getAttributeValue(AttributeMapper.ATTR_NOTE);
  }



  /**
   * Indicates that the associated view was clicked and that the associated
   * entry should be added to the contacts.
   *
   * @param  view  The view that was clicked.
   */
  @Override
  public void onClick(final View view)
  {
    logEnter(LOG_TAG, "onClick", view);

    Intent insertIntent = new Intent(ContactsContract.Intents.Insert.ACTION);
    insertIntent.setType(ContactsContract.RawContacts.CONTENT_TYPE);

    insertIntent.putExtra("finishActivityOnSaveCompleted", true);

    addName(insertIntent, fullName, firstName, lastName);
    addAddress(insertIntent, address, city, state, postalCode, ContactsContract.CommonDataKinds.StructuredPostal.TYPE_WORK);

    if (isNotEmpty(title)) {
      insertIntent.putExtra(ContactsContract.Intents.Insert.JOB_TITLE, title);
    }
    if (isNotEmpty(organization)) {
      insertIntent.putExtra(ContactsContract.Intents.Insert.COMPANY, organization);
    }
    if (isNotEmpty(note)) {
      insertIntent.putExtra(ContactsContract.Intents.Insert.NOTES, note);
    }

    if (isNotEmpty(email)) {
      addEmail(insertIntent, email, ContactsContract.CommonDataKinds.Email.TYPE_WORK);
    }

    ArrayList<ContentValues> contactData = new ArrayList<>();

//    contactData.add(addAddress(address, city, state, postalCode, ContactsContract.CommonDataKinds.StructuredPostal.TYPE_WORK));

    if (isNotEmpty(workNumber)) {
      contactData.add(addPhoneNumber(workNumber, ContactsContract.CommonDataKinds.Phone.TYPE_WORK));
    }
    if (isNotEmpty(mobileNumber)) {
      contactData.add(addPhoneNumber(mobileNumber, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE));
    }
    if (isNotEmpty(homeNumber)) {
      contactData.add(addPhoneNumber(homeNumber, ContactsContract.CommonDataKinds.Phone.TYPE_HOME));
    }
    if (isNotEmpty(faxNumber)) {
      contactData.add(addPhoneNumber(faxNumber, ContactsContract.CommonDataKinds.Phone.TYPE_FAX_WORK));
    }
    if (isNotEmpty(pagerNumber)) {
      contactData.add(addPhoneNumber(pagerNumber, ContactsContract.CommonDataKinds.Phone.TYPE_PAGER));
    }

    if (isNotEmpty(websiteUri)) {
      contactData.add(
              createContentRow(ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE,
                      ContactsContract.CommonDataKinds.Website.URL, websiteUri));
    }

    if (!contactData.isEmpty()) {
      insertIntent.putParcelableArrayListExtra(ContactsContract.Intents.Insert.DATA, contactData);
    }

    activity.startActivity(insertIntent);
  }

  private boolean isNotEmpty(final String string) {
    return null != string && !string.isEmpty();
  }

  private void appendStringWithSpace(final StringBuilder stringBuilder, final String string) {
    if (stringBuilder.charAt(stringBuilder.length() - 1) != ' ') {
      stringBuilder.append(' ');
    }
    stringBuilder.append(string);
  }

  private void addName(final Intent intent,
                       final String fullName,
                       final String firstName,
                       final String lastName) {
      logEnter(LOG_TAG, "addName", fullName, firstName, lastName);

      if (isNotEmpty(fullName)) {
          intent.putExtra(ContactsContract.Intents.Insert.NAME, fullName);
          return;
      }

      StringBuilder stringBuilder = new StringBuilder();

      if (isNotEmpty(firstName)) {
          stringBuilder.append(firstName);
      }
      if (isNotEmpty(lastName)) {
          appendStringWithSpace(stringBuilder, lastName);
      }
      if (stringBuilder.length() > 0) {
          intent.putExtra(ContactsContract.Intents.Insert.NAME, stringBuilder.toString());
      }
  }

  private void addAddress(final Intent intent,
                          final String address,
                          final String city,
                          final String state,
                          final String postalCode,
                          final int type) {
    logEnter(LOG_TAG, "addAddress", address, type);

    StringBuilder stringBuilder = new StringBuilder();

    if (isNotEmpty(address)) {
      stringBuilder.append(address);
    }
    if (isNotEmpty(city)) {
      appendStringWithSpace(stringBuilder, city);
    }
    if (isNotEmpty(state)) {
      appendStringWithSpace(stringBuilder, state);
    }
    if (isNotEmpty(postalCode)) {
      appendStringWithSpace(stringBuilder, postalCode);
    }

    intent.putExtra(ContactsContract.Intents.Insert.POSTAL, stringBuilder.toString());
    intent.putExtra(ContactsContract.Intents.Insert.POSTAL_TYPE, type);
  }

  private ContentValues addAddress(final String address,
                                   final String city,
                                   final String state,
                                   final String postalCode,
                                   final int type) {
    logEnter(LOG_TAG, "addAddress", address, type);

    ContentValues contentRow = createContentRow(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE,
            ContactsContract.CommonDataKinds.StructuredPostal.TYPE, type);

    if (isNotEmpty(address)) {
      contentRow.put(ContactsContract.CommonDataKinds.StructuredPostal.STREET, address);
    }
    if (isNotEmpty(city)) {
      contentRow.put(ContactsContract.CommonDataKinds.StructuredPostal.CITY, city);
    }
    if (isNotEmpty(state)) {
      contentRow.put(ContactsContract.CommonDataKinds.StructuredPostal.REGION, state);
    }
    if (isNotEmpty(postalCode)) {
      contentRow.put(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, postalCode);
    }

    return contentRow;
  }

  private ContentValues createContentRow(final String mimeType, final String contentKey, final String contentValue) {
    logEnter(LOG_TAG, "createContentRow", contentKey, contentValue);

    ContentValues contentRow = new ContentValues();

    contentRow.put(ContactsContract.Data.MIMETYPE, mimeType);
    contentRow.put(contentKey, contentValue);

    return contentRow;
  }

  private ContentValues createContentRow(final String mimeType, final String contentKey, final int contentValue) {
    logEnter(LOG_TAG, "createContentRow", contentKey, contentValue);

    ContentValues contentRow = new ContentValues();

    contentRow.put(ContactsContract.Data.MIMETYPE, mimeType);
    contentRow.put(contentKey, contentValue);

    return contentRow;
  }

  private ContentValues addPhoneNumber(final String phoneNumber, final int type) {
    logEnter(LOG_TAG, "addPhoneNumber", phoneNumber, type);

    ContentValues contentRow = createContentRow(ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE,
            ContactsContract.CommonDataKinds.Phone.NUMBER, phoneNumber);
    contentRow.put(ContactsContract.CommonDataKinds.Phone.TYPE, type);

    return contentRow;
  }

  private void addEmail(final Intent intent, final String emailAddress, final int type) {
    logEnter(LOG_TAG, "addEmail", emailAddress, type);

    intent.putExtra(ContactsContract.Intents.Insert.EMAIL, emailAddress)
            .putExtra(ContactsContract.Intents.Insert.EMAIL_TYPE, type);
  }
}
